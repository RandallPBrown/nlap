      var src = 'http://vacantbrain.com/short-key-master/test.kml';
      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 39.8283, lng: 98.5795},
          zoom: 25,
          mapTypeId: 'roadmap'
        });

        var input = document.getElementById('pac-input');
        var kmlLayer = new google.maps.KmlLayer(src, {
          suppressInfoWindows: false,
          preserveViewport: false,
          map: map
        });
        kmlLayer.addListener('click', function(event) {
          var content = event.featureData.infoWindowHtml;
          var testimonial = document.getElementById('capture');
          testimonial.innerHTML = '<span>' + content + '</span>';
        });




        // Create the search box and link it to the UI element.
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });



        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];
        var placesList = document.getElementById('places');

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));


    google.maps.event.addListener(markers, 'click', function() {
      infowindow.setContent(place.name + "<br />" + place.formatted_address +"<br />");
      infowindow.open(map, this);
    });

            // Get details (phone number, address, etc) for Results table
          service = new google.maps.places.PlacesService(map);
          var request = { reference: place.reference };
          service.getDetails(request, function(details, status) {
                var li = document.createElement('tr');
                li.innerHTML = '<td>' + details.name + '</td>' + '<td>' + details.formatted_address + '</td>' + '<td>' + details.formatted_phone_number + '</td>';
                placesList.appendChild(li);
              });



            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }